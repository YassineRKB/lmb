<?php
if (!defined('ABSPATH')) exit;

class LMB_Form_Handler {
    public static function init() {
        // Register our custom "Save as Legal Ad" action with Elementor Pro Forms
        add_action('elementor_pro/forms/actions/register', [__CLASS__, 'register_elementor_action']);
        
        // Add debugging hook to check if Elementor Pro is active
        add_action('admin_init', [__CLASS__, 'check_elementor_pro']);
    }

    public static function check_elementor_pro() {
        if (!did_action('elementor_pro/init')) {
            LMB_Error_Handler::log_error('Elementor Pro is not active or loaded', [
                'action' => 'check_elementor_pro',
                'elementor_pro_active' => class_exists('\ElementorPro\Plugin'),
                'elementor_active' => class_exists('\Elementor\Plugin')
            ]);
        }
    }

    public static function register_elementor_action($form_actions_registrar) {
        try {
            // Log registration attempt
            LMB_Error_Handler::log_error('Attempting to register Elementor action', [
                'registrar_class' => get_class($form_actions_registrar),
                'action' => 'register_elementor_action'
            ]);
            
            // This file contains the action's logic
            $action_file = LMB_CORE_PATH . 'includes/class-lmb-action-save-ad.php';
            if (!file_exists($action_file)) {
                LMB_Error_Handler::log_error('Action file not found', ['file' => $action_file]);
                return;
            }
            
            require_once $action_file;
            
            if (!class_exists('LMB_Save_Ad_Action')) {
                LMB_Error_Handler::log_error('LMB_Save_Ad_Action class not found after requiring file');
                return;
            }
            
            // The correct method in recent Elementor Pro versions is register()
            $action = new LMB_Save_Ad_Action();
            $form_actions_registrar->register($action);
            
            LMB_Error_Handler::log_error('Successfully registered Elementor action', [
                'action_name' => $action->get_name(),
                'action_label' => $action->get_label()
            ]);
            
        } catch (Exception $e) {
            LMB_Error_Handler::log_error('Failed to register Elementor action', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
        }
    }

    // --- REVISED: This function now correctly saves repeater data as arrays ---
    public static function create_legal_ad($form_data) {
        $user_id = get_current_user_id();
        if (!$user_id) {
            throw new Exception('User not logged in.');
        }

        $ad_type = isset($form_data['ad_type']) ? sanitize_text_field($form_data['ad_type']) : 'Untitled Ad';
        $company_name = isset($form_data['companyname']) ? sanitize_text_field($form_data['companyname']) : '';
        $ad_title = $ad_type . ($company_name ? ' - ' . $company_name : '') . ' - ' . wp_date('Y-m-d');

        $post_id = wp_insert_post([
            'post_type'    => 'lmb_legal_ad',
            'post_title'   => $ad_title,
            'post_status'  => 'draft',
            'post_author'  => $user_id,
            'post_content' => '' // Generated by the template engine
        ], true);

        if (is_wp_error($post_id)) {
            throw new Exception($post_id->get_error_message());
        }

        // --- NEW: Save all form data as a single JSON object ---
        update_post_meta($post_id, '_lmb_form_data_json', wp_json_encode($form_data));

        // Also save ad_type separately for easy querying
        if (isset($form_data['ad_type'])) {
            update_post_meta($post_id, 'ad_type', $form_data['ad_type']);
        }
        // --- MODIFICATION: Save company_name separately if it exists ---
        if (!empty($company_name)) {
            update_post_meta($post_id, 'company_name', $company_name);
        }
        update_post_meta($post_id, 'lmb_status', 'draft');
        update_post_meta($post_id, 'lmb_client_id', $user_id);

        // Generate the text from the new JSON data
        self::generate_and_save_formatted_text($post_id);
        
        self::log_activity('New legal ad #%d created as draft by %s', $post_id, wp_get_current_user()->display_name);
        return $post_id;
    }
    
    // Helper to prevent code duplication
    private static function log_activity($msg, ...$args) {
        if (class_exists('LMB_Ad_Manager')) {
            LMB_Ad_Manager::log_activity(vsprintf($msg, $args));
        }
    }

    // --- REWRITTEN & UPGRADED FUNCTION ---
    // REPLACE the existing generate_and_save_formatted_text function with this final version
    public static function generate_and_save_formatted_text($post_id) {
        $ad_type = get_post_meta($post_id, 'ad_type', true);
        $json_data = get_post_meta($post_id, '_lmb_form_data_json', true);

        if (empty($ad_type) || empty($json_data)) {
            return;
        }

        $form_data = json_decode($json_data, true);
        if (!is_array($form_data)) {
            return;
        }

        // --- Create a fully recursive lowercase version of the data ---
        $form_data_lower = json_decode(strtolower(json_encode($form_data)), true);

        $all_templates = get_option('lmb_legal_ad_templates', []);
        $template = isset($all_templates[sanitize_key($ad_type)]) ? $all_templates[sanitize_key($ad_type)] : 'Template not found for this ad type.';

        // --- FINAL, CASE-INSENSITIVE TEMPLATE ENGINE ---

        // 1. Process SUM: {{sum:associates:assocshares}}
        $template = preg_replace_callback('/{{sum:(.*?):(.*?)}}/i', function($matches) use ($form_data_lower) {
            $repeater_key = strtolower(trim($matches[1]));
            $field_key = strtolower(trim($matches[2]));
            
            if (isset($form_data_lower[$repeater_key]) && is_array($form_data_lower[$repeater_key])) {
                $total = 0;
                foreach ($form_data_lower[$repeater_key] as $item) {
                    if (isset($item[$field_key])) {
                        $total += (float)$item[$field_key];
                    }
                }
                return $total;
            }
            return '0';
        }, $template);

        // 2. Process IFCOUNT: {{#ifcount gerants > 1}}...{{/ifcount}}
        $template = preg_replace_callback('/{{#ifcount (.*?) > (\d+)}}(.*?){{else}}(.*?){{\/ifcount}}/is', function($matches) use ($form_data_lower) {
            $repeater_key = strtolower(trim($matches[1]));
            $count_check = (int)$matches[2];
            $text_if_true = $matches[3];
            $text_if_false = $matches[4];

            $item_count = isset($form_data_lower[$repeater_key]) && is_array($form_data_lower[$repeater_key]) ? count($form_data_lower[$repeater_key]) : 0;

            return ($item_count > $count_check) ? $text_if_true : $text_if_false;
        }, $template);

        // 3. Process EACH loops: {{#each associates}}...{{/each}}
        $template = preg_replace_callback('/{{#each (.*?)}}(.*?){{\/each}}/is', function($matches) use ($form_data_lower) {
            $repeater_key = strtolower(trim($matches[1]));
            $inner_template = trim($matches[2]);
            
            if (isset($form_data_lower[$repeater_key]) && is_array($form_data_lower[$repeater_key])) {
                $output = '';
                foreach ($form_data_lower[$repeater_key] as $item) {
                    $line = $inner_template;
                    $line = preg_replace_callback('/{{(.*?)}}/', function($inner_matches) use ($item) {
                        $field_key = strtolower(trim($inner_matches[1]));
                        return isset($item[$field_key]) ? esc_html($item[$field_key]) : '';
                    }, $line);
                    $output .= $line;
                }
                return $output;
            }
            return '';
        }, $template);

        // 4. Process remaining simple placeholders: {{companyName}}
        $template = preg_replace_callback('/{{(.*?)}}/', function($matches) use ($form_data_lower) {
            $key = strtolower(trim($matches[1]));
            return isset($form_data_lower[$key]) ? esc_html($form_data_lower[$key]) : '';
        }, $template);

        // Final processing and saving
        $formatted_text = wp_kses_post(nl2br($template));
        if (!empty($formatted_text)) {
            wp_update_post(['ID' => $post_id, 'post_content' => $formatted_text]);
            update_post_meta($post_id, 'full_text', $formatted_text);
        }
    }
}